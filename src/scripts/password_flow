#!/bin/bash

# prepare variables
#
client=ccf681950c2f4ce8b12fc37fd35481a6
client_password=secret
user=admin@example.com
user_password=123
scope="read%20write%20delete"
redirect_uri=http://localhost:8080/login/oauth2
base_url=http://localhost:8080

echo "******************************************************************************************"
echo "test password flow"

echo ""
echo "1) test grant_type=password with wrong password"
echo ""
cmd="curl -is -X POST -u '$client:$client_password' '$base_url/oauth/v1/token' -d 'grant_type=password&username=$user&password=user_password&scope=$scope'"
echo "$cmd"
response=$(eval "$cmd")

RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

response_code=$(echo "$response" | head -n 1 | awk '{ print $2 }')

if [ "$response_code" == "200" ]; then
    echo "response_code should not be 200"
    exit 1
fi

echo ""
echo "test grant_type=password with wrong client password"
echo ""
cmd="curl -is -X POST -u '$client:client_password' '$base_url/oauth/v1/token' -d 'grant_type=password&username=$user&password=$user_password&scope=$scope'"
echo "$cmd"
response=$(eval "$cmd")

RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

response_code=$(echo "$response" | head -n 1 | awk '{ print $2 }')

if [ "$response_code" == "200" ]; then
    echo "response_code should not be 200"
    exit 1
fi

echo ""
echo "2) test grant_type=password to get access_token & refresh_token"
echo ""
cmd="curl -sS -X POST -u '$client:$client_password' '$base_url/oauth/v1/token' -d 'grant_type=password&username=$user&password=$user_password&scope=$scope'"
echo "$cmd"
response=$(eval "$cmd")

RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

access_token=$(echo "$response" | jq '.access_token' | sed -e 's/^"//' -e 's/"$//')
if [ "$access_token" == "null" ]; then
    echo "access_token is null"
    exit 1;
fi

echo "access_token=$access_token"

refresh_token=$(echo "$response" | jq '.refresh_token' | sed -e 's/^"//' -e 's/"$//')
if [ "$refresh_token" == "null" ]; then
    echo "refresh_token is null"
    exit 1;
fi

echo "refresh_token=$refresh_token"

echo ""
echo "3) check the access_token"
echo ""
cmd="curl -sS -u '$client:$client_password' -X GET '$base_url/oauth/v1/check_token?token=${access_token}'"
echo "$cmd"
response=$(eval "$cmd")
RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

if [[ $response = *\"error\"* ]]; then
  echo "check token failed"
  exit 1
else
  echo "check token OK"
fi  

echo ""
echo "4) test the access_token as Bearer header"
echo ""
cmd="curl -sS -H 'Authorization: Bearer $access_token' -X GET '$base_url/v1/api/test/test'"
echo "$cmd"
response=$(eval "$cmd")
RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

subject=$(echo "$response" | jq '.subject' | sed -e 's/^"//' -e 's/"$//')
echo "subject=$subject"

if [ "$subject" != "test" ]; then
  echo "subject not correct"
  exit 1
fi

echo ""
echo "5) test the access_token as query string"
echo ""
cmd="curl -sS -X GET '$base_url/v1/api/test/test?access_token=$access_token'"
echo "$cmd"
response=$(eval "$cmd")
RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

echo ""
echo "6) test the refresh_token"
echo ""
cmd="curl -sS -X POST -u '$client:$client_password' '$base_url/oauth/v1/token' -d 'grant_type=refresh_token&scope=read&refresh_token=$refresh_token'"
echo "$cmd"
response=$(eval "$cmd")

RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

access_token=$(echo "$response" | jq '.access_token' | sed -e 's/^"//' -e 's/"$//')
if [ "$access_token" == "null" ]; then
    echo "access_token is null"
    exit 1;
fi

echo "access_token=$access_token"

refresh_token=$(echo "$response" | jq '.refresh_token' | sed -e 's/^"//' -e 's/"$//')
if [ "$refresh_token" == "null" ]; then
    echo "refresh_token is null"
    exit 1;
fi

echo "refresh_token=$refresh_token"

echo ""
echo "7) check the access_token"
echo ""
cmd="curl -sS -u '$client:$client_password' -X GET '$base_url/oauth/v1/check_token?token=${access_token}'"
echo "$cmd"
response=$(eval "$cmd")
RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

if [[ $response = *\"error\"* ]]; then
  echo "check token failed"
  exit 1
else
  echo "check token OK"
fi  

echo ""
echo "8) test the access_token as Bearer header"
echo ""
cmd="curl -sS -H 'Authorization: Bearer $access_token' -X GET '$base_url/v1/api/test/test'"
echo "$cmd"
response=$(eval "$cmd")

RESULT=$?

echo "$response"

if [ $RESULT -eq 0 ]; then
  echo "success"
else
  echo "failed to run "$cmd""
  exit 1
fi

subject=$(echo "$response" | jq '.subject' | sed -e 's/^"//' -e 's/"$//')
echo "subject=$subject"

if [ "$subject" != "test" ]; then
  echo "subject not correct"
  exit 1
fi

echo "------------------------------------------------------------------------------------------"
echo "test password flow successful"
